#!/usr/bin/perl
#
use strict; 
use warnings;

# mnemonic for perl variables: $calar, @rray, %ash;
#
# array is indexed and contains a list, which starts with the integer 0, counting by 1; 
#
# %freq is a hash barrel, with many unique strings (hash keys) associated with the count (value)
# (key-value pairs in no particular order)

# For Vaughan [the unique] wounds are the keys to a new sexuality born from a perverse technology.


open my $crash, '<', 'crash.txt' or die "$!\n"; 
open my $report, '>', 'crash_report.txt' or die "$!\n"; 

my %freq;

# function split/PATTERN/, splits string(text) into array(words) with ''; 
# to ignore blank space >1, use /\s+/; however, with the split 'onwhitespace' function, 
# punctuation and thus possessive forms of words remain, e.g. single standing vaughan would appear x353 only; 
#use /\w+/g for to evade punctuation, prints only alphanumeric patterns; 


while (<$crash>) {
	
		$freq{ lc $1 }++ while /(\w+)/g;
;

		# lc function turns all upper- into lowercase letters; and then stores them in $1? 
		# backreference \ to match double-letters?
		# w is shortcut for [character class] [A-Za-z0-9_] (as of 3rd edition, p. 106);
	        # the + is modifier /quantifier? for strings, seperated by spaces; 		
		# g turns any arbitrary whitespace into single space (p.123);

# alas, i need to keep hyphen in the middle of string! hyphens are special inside a [character class] and need to be backlashed. 
		#what bout french special characters?

}

foreach my $str (reverse sort { $freq{$a} <=> $freq{$b} } keys %freq) 
{
	printf {$report} "%-29s %s\n", $str, $freq{$str}; # 29 is the field width between the columns of words and frequency;
}

close $crash;
close $report;
print "Job done.\n";



#	$freq{ lc $1 }++ while /(\w+)/g;
#
#


# character classes in square brackets, parantheses four grouping patterns (and memory?)!


#test (/(\\-) (\w+)/g) what does g do
